package kr.co.jhta.web;

import java.io.File;
import java.io.FileOutputStream;
import java.util.List;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.co.jhta.form.BoardForm;
import kr.co.jhta.service.BoardService;
import kr.co.jhta.vo.Board;

@Controller
@RequestMapping("/board")
public class BoardController {
	
	@Autowired
	private BoardService boardService;
	
	@Value("${directory.save.freeboard}")
	private String saveDirectory;
	
	// 이런 것들을 요청 핸들러 메서드라고 함
	@RequestMapping("/list.do")
	public String boardList(Model model) {
		
		// 게시글 전체 조회
		List<Board> boardList = boardService.getAllBoards();
		// 조회된 게시글을 Model에 담아서 뷰 페이지에 전달하기
		model.addAttribute("boards", boardList);	
		// 내부이동할 JSP 페이지의 경로 및 이름 반환
		return "board/list";	// WEB-INF/views/board/list.jsp, 앞뒤는 controller-mvc에 적혀있음
	}
	
	@RequestMapping("/form.do")
	public String form() {
		return "board/form";
	}
	
	@RequestMapping("/add.do")
	// form 입력값을 읽어올 땐 BoardForm boardForm 이런식으로 가져옴
	public String addBoard(BoardForm boardForm) throws Exception {
		Board board = new Board();
		
		// BeanUtils.copyProperties(원본, 대상)
		// * 원본객체의 필드값을 대상객체의 필드에 복사한다
		// * 원본객체의 필드명과 대상객체의 필드명이 동일한 필드만 복사가 발생한다
		// * 원본객체와 대상객체의 필드명은 동일하지만, 타입이 서로 다를 때는 에러가 발생한다
		// * 원본객체의 대상객체의 필드를 선택적으로 복사할 수 없다
		//   (필드명은 동일하지만, 타입이 다른 필드가 존재하지 않아야 한다)
		
		// title, writer, content, password 값이 boardForm에서 board로 복사된다
		// boardForm의 값을 board에 그대로 복사 (이름이 같은데 타입이 다른 경우는 불가능, 이름 타입 둘다 동일해야함)
		BeanUtils.copyProperties(boardForm, board);
		
		// 첨부파일 다루기
		// MultipartFile
		// * 첨부파일 업로드를 지원하는 객체
		// * <form /> 태그의 enctype="multipart/form-data'이고, 첨부파일 필드가 있는 경우
		//   xxxForm객체에 첨부파일 입력 필드와 동일한 이름의 필드가 있으면, MultipartFile의 결코 null이 아니다
		// (<input type="file"/> 입력필드에서 첨부파일을 선택하지 않아도 MultipartFile객체는 null이 아니다. 비어있을 뿐이다)
		
		// MultipartFile는 항상 객체가 존재함 (file이 있던 없던 언제나 null이 아님)
		MultipartFile upfile = boardForm.getUpfile();
		
		if (!upfile.isEmpty()) {
			String filename = upfile.getOriginalFilename();
			filename = System.currentTimeMillis() + filename;
			File file = new File(saveDirectory, filename);
			
			FileCopyUtils.copy(upfile.getInputStream(), new FileOutputStream(file));
			board.setFilename(filename);
		}
		
		boardService.addNewBoard(board);
		
		// insert delete update한 후엔 list를 재요청
		return "redirect:list.do";
	}
	
	@RequestMapping("/likes.do")
	// 쿼리스트링은 요청을 식별하는것에 포함되지 않음 (?no 이런거 안적어도 됨)
	// @RequestParam : 요청객체에서 no라는 파라미터값을 꺼내올 때 사용 // url뒤의 ?값이 no // 뒤에는 그 값이 저장될 매개변수 선언
	public String likesBoard(@RequestParam("no") long boardNo, RedirectAttributes redirectAttributes) {
		boardService.increaseBoardLikes(boardNo);
		
//		insert, update, delete 다음엔 재요청 url (redirect)
//		return "redirect:detail.do?no=" + boardNo;
//		이런식으로 해도 되는데 값이 많아지면 +를 계속 써야하기 때문에 불편함
//			 => 매개변수에 RedirectAttributes 선언
		redirectAttributes.addAttribute("no", boardNo);
		
		return "redirect:detail.do";
	}
	
	@RequestMapping("/detail.do")
	// view 페이지에 전달하기 위해 매개변수 자리에 Model이 들어감
	public String detailBoard(@RequestParam("no") long boardNo, Model model) {
		
		model.addAttribute("board", boardService.getBoardDetail(boardNo));
		
		return "board/detail";
	}
	
}



